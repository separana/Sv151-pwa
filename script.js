
const STORAGE_KEY='sv151-collectie',WISH_KEY='sv151-wishlist',QTY_KEY='sv151-qty',HISTORY_KEY='sv151-history';
let OWNED=(JSON.parse(localStorage.getItem(STORAGE_KEY)||'{}').owned)||{};
let WISH=JSON.parse(localStorage.getItem(WISH_KEY)||'{}');
let QTY=JSON.parse(localStorage.getItem(QTY_KEY)||'{}');
let HISTORY=JSON.parse(localStorage.getItem(HISTORY_KEY)||'{}');
let CARDS=[],FILTERED=[],IDX=-1,ACTIVE_TAB='all';
let PRICE_SOURCE=localStorage.getItem('sv151-price-source')||'cardmarket';

const grid=document.getElementById('grid'), q=document.getElementById('q'), typeSel=document.getElementById('typeSel'),
rarSel=document.getElementById('rarSel'), ownedSel=document.getElementById('ownedSel'), sortSel=document.getElementById('sortSel'),
statusEl=document.getElementById('status'), ownCount=document.getElementById('ownCount'), totCount=document.getElementById('totCount'),
pct=document.getElementById('pct'), bar=document.getElementById('bar'), ownedValue=document.getElementById('ownedValue'),
wishValue=document.getElementById('wishValue'), priceSourceSel=document.getElementById('priceSource');

const viewer=document.getElementById('viewer'), big=document.getElementById('big'), vName=document.getElementById('vName'),
vNum=document.getElementById('vNum'), vRarity=document.getElementById('vRarity'), vTypes=document.getElementById('vTypes');
document.getElementById('closeBtn').onclick=()=>viewer.close();
document.getElementById('prevBtn').onclick=()=>openViewer(IDX-1);
document.getElementById('nextBtn').onclick=()=>openViewer(IDX+1);
document.getElementById('tab-all').onclick=()=>{ACTIVE_TAB='all';setTabs();applyFilters();};
document.getElementById('tab-wish').onclick=()=>{ACTIVE_TAB='wish';setTabs();applyFilters();};
function setTabs(){document.getElementById('tab-all').classList.toggle('active',ACTIVE_TAB==='all');document.getElementById('tab-wish').classList.toggle('active',ACTIVE_TAB==='wish');}

const USD_TO_EUR=0.92, toEUR=x=>x.toLocaleString('nl-BE',{style:'currency',currency:'EUR'});
function rarityColor(r){if(!r) return 'var(--soft)'; r=r.toLowerCase(); if(r.includes('illustration'))return'var(--r-illustration)'; if(r.includes('double'))return'var(--r-double)'; if(r.includes('ultra')||r.includes('ex'))return'var(--r-ultra)'; if(r.includes('rare'))return'var(--r-rare)'; if(r.includes('uncommon'))return'var(--r-uncommon)'; return'var(--r-common)';}
function pickPrice(c,src){if(src==='tcgplayer'){const tp=c.tcgplayer?.prices; if(tp){const usd=[tp.holofoil?.market,tp.normal?.market,tp.reverseHolofoil?.market,tp.ultraRare?.market,tp.rainbowRare?.market,tp.gold?.market].filter(v=>typeof v==='number'&&v>0); if(usd.length)return +(Math.max(...usd)*USD_TO_EUR).toFixed(2);} } else {const cm=c.cardmarket?.prices; if(cm){const arr=[cm.trendPrice,cm.avg7,cm.avg30,cm.averageSellPrice,cm.lowPrice,cm.suggestedPrice,cm.reverseHoloTrend,cm.reverseHoloSell].filter(v=>typeof v==='number'&&v>0); if(arr.length) return +Math.max(...arr).toFixed(2);} } return null;}

async function fetchAll(){try{statusEl.textContent='Laden…'; const url=new URL('https://api.pokemontcg.io/v2/cards'); url.searchParams.set('q','set.id:"sv3pt5"'); url.searchParams.set('pageSize','250'); const res=await fetch(url); const data=await res.json(); CARDS=(data.data||[]); CARDS.sort((a,b)=>Number(a.number.replace(/\D/g,''))-Number(b.number.replace(/\D/g,''))); localStorage.setItem('sv151-cards-cache',JSON.stringify(CARDS)); statusEl.textContent=`Geladen: ${CARDS.length} kaarten`; populateFilters(); applyFilters(); logHistorySample(); }catch(e){statusEl.textContent='Fout bij laden'; console.error(e); alert('Kon kaarten niet laden.');}}
function populateFilters(){const types=[...new Set(CARDS.flatMap(c=>c.types||[]))].sort(); typeSel.innerHTML='<option value="">Alle types</option>'+types.map(t=>`<option value="${t}">${t}</option>`).join(''); const rars=[...new Set(CARDS.map(c=>c.rarity).filter(Boolean))].sort(); rarSel.innerHTML='<option value="">Alle rarities</option>'+rars.map(r=>`<option value="${r}">${r}</option>`).join('');}
function applyFilters(){const term=q.value.trim().toLowerCase(); FILTERED=CARDS.filter(c=>{ if(ACTIVE_TAB==='wish'&&!WISH[c.id])return false; if(term){const txt=(c.name+' '+c.number).toLowerCase(); if(!txt.includes(term))return false;} if(typeSel.value&&!(c.types||[]).includes(typeSel.value))return false; if(rarSel.value&&(c.rarity||'')!==rarSel.value)return false; const has=!!OWNED[c.id]; if(ownedSel.value==='owned'&&!has)return false; if(ownedSel.value==='missing'&&has)return false; return true;}); const key=sortSel.value; if(key==='price'){FILTERED.sort((a,b)=>(pickPrice(b,PRICE_SOURCE)||0)-(pickPrice(a,PRICE_SOURCE)||0));} else if(key==='name'){FILTERED.sort((a,b)=>a.name.localeCompare(b.name));} else {FILTERED.sort((a,b)=>Number(a.number.replace(/\D/g,''))-Number(b.number.replace(/\D/g,'')));} renderGrid(); updateStats();}
function renderGrid(){grid.innerHTML=''; FILTERED.forEach((c,idx)=>{const card=document.createElement('div'); card.className='card'; card.dataset.cardId=c.id; card.style.borderColor=rarityColor(c.rarity); const small=c.images?.small||''; card.innerHTML=`<img loading="lazy" src="${small}" alt="${c.name}" data-idx="${idx}"><div class="meta"><span class="chip">#${c.number}</span><span class="chip">${c.rarity||''}</span></div>`; const p=pickPrice(c,PRICE_SOURCE); if(p){const x=document.createElement('div'); x.className='price'; x.textContent='€ '+p.toFixed(2); card.appendChild(x);} if(OWNED[c.id]){const o=document.createElement('div'); o.className='own'; o.textContent='✓'; card.appendChild(o);} if(QTY[c.id]&&QTY[c.id]>1){const qx=document.createElement('div'); qx.className='qty'; qx.textContent='x'+QTY[c.id]; card.appendChild(qx);} let pressTimer=null; card.addEventListener('touchstart',()=>{pressTimer=setTimeout(()=>{QTY[c.id]=(QTY[c.id]||(OWNED[c.id]?1:0))+1; OWNED[c.id]=True; saveAll(); applyFilters();},500)}); card.addEventListener('touchend',()=>clearTimeout(pressTimer)); card.addEventListener('click',()=>{OWNED[c.id]=!OWNED[c.id]; if(OWNED[c.id]&&!QTY[c.id])QTY[c.id]=1; if(!OWNED[c.id]){delete QTY[c.id]; delete WISH[c.id];} saveAll(); applyFilters();}); card.querySelector('img').addEventListener('dblclick',(ev)=>{ev.stopPropagation(); openViewer(idx);}); if(!OWNED[c.id]){const wishBtn=document.createElement('div'); wishBtn.className='chip'; wishBtn.style.position='absolute'; wishBtn.style.left='8px'; wishBtn.style.bottom='8px'; wishBtn.style.cursor='pointer'; wishBtn.textContent=WISH[c.id]?'★ Op wishlist':'☆ Wishlist'; wishBtn.onclick=(e)=>{e.stopPropagation(); if(WISH[c.id]) delete WISH[c.id]; else WISH[c.id]=true; saveAll(); applyFilters();}; card.appendChild(wishBtn);} grid.appendChild(card);});}
function updateStats(){const total=CARDS.length||207; const ownedN=Object.keys(OWNED).filter(k=>OWNED[k]).length; ownCount.textContent=ownedN; totCount.textContent=total; const perc=Math.round(ownedN/total*1000)/10; pct.textContent=perc; bar.style.width=Math.round(ownedN/total*100)+'%'; let ownVal=0,wishVal=0; for(const c of CARDS){const p=pickPrice(c,PRICE_SOURCE); if(!p) continue; if(OWNED[c.id]) ownVal+=p; if(WISH[c.id]&&!OWNED[c.id]) wishVal+=p;} ownedValue.textContent=toEUR(+ownVal.toFixed(2)); wishValue.textContent=toEUR(+wishVal.toFixed(2));}
function saveAll(){localStorage.setItem(STORAGE_KEY, JSON.stringify({owned:OWNED})); localStorage.setItem(WISH_KEY, JSON.stringify(WISH)); localStorage.setItem(QTY_KEY, JSON.stringify(QTY));}
function openViewer(i){if(i<0||i>=FILTERED.length) return; IDX=i; const c=FILTERED[i]; big.src=c.images?.large||c.images?.small||''; vName.textContent=c.name; vNum.textContent='#'+c.number; vRarity.textContent=c.rarity||''; vTypes.innerHTML=(c.types||[]).map(t=>'<span class="chip">'+t+'</span>').join(' '); drawHistory(c.id); viewer.showModal();}
function drawHistory(cardId){const cvs=document.getElementById('priceChart'), ctx=cvs.getContext('2d'); cvs.width=600; cvs.height=260; ctx.clearRect(0,0,cvs.width,cvs.height); const samples=(HISTORY[cardId]||[]).slice(-40); const key=(PRICE_SOURCE==='tcgplayer'?'tp':'cm'); const data=samples.map(s=>s[key]).filter(v=>typeof v==='number'); if(!data.length){ctx.fillStyle='#9ab0c7'; ctx.fillText('Nog geen data — prijzen worden lokaal gelogd.',16,24); return;} const min=Math.min(...data), max=Math.max(...data); const pad=24, w=cvs.width-2*pad, h=cvs.height-2*pad; ctx.strokeStyle='#263342'; ctx.strokeRect(pad,pad,w,h); ctx.strokeStyle='rgba(99,194,255,.15)'; ctx.beginPath(); for(let i=0;i<=4;i++){const y=pad+h*i/4; ctx.moveTo(pad,y); ctx.lineTo(pad+w,y);} ctx.stroke(); ctx.strokeStyle='#eacb6b'; ctx.lineWidth=2; ctx.beginPath(); data.forEach((v,i)=>{const x=pad+(w*(i/(data.length-1||1))); const y=pad+h-((v-min)/(max-min||1))*h; if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y);}); ctx.stroke(); ctx.fillStyle='#9ab0c7'; ctx.font='12px system-ui'; ctx.fillText('min: '+min.toFixed(2), pad+6, cvs.height-6); ctx.fillText('max: '+max.toFixed(2), cvs.width-90, cvs.height-6);}
function logHistorySample(){const t=Date.now(); for(const c of CARDS){const cm=pickPrice(c,'cardmarket'); const tp=pickPrice(c,'tcgplayer'); if(!HISTORY[c.id]) HISTORY[c.id]=[]; HISTORY[c.id].push({t,cm,tp}); if(HISTORY[c.id].length>120) HISTORY[c.id].shift(); } localStorage.setItem(HISTORY_KEY, JSON.stringify(HISTORY));}
q.oninput=applyFilters; typeSel.onchange=applyFilters; rarSel.onchange=applyFilters; ownedSel.onchange=applyFilters; sortSel.onchange=applyFilters; priceSourceSel.value=PRICE_SOURCE; priceSourceSel.onchange=()=>{PRICE_SOURCE=priceSourceSel.value; localStorage.setItem('sv151-price-source',PRICE_SOURCE); applyFilters();};
document.getElementById('btn-export').onclick=()=>{const blob=new Blob([JSON.stringify({owned:OWNED,wishlist:WISH,qty:QTY},null,2)],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='sv151-v2-collectie.json'; a.click();};
document.getElementById('btn-import').onclick=()=>{const inp=document.createElement('input'); inp.type='file'; inp.accept='application/json'; inp.onchange=async()=>{const txt=await inp.files[0].text(); const obj=JSON.parse(txt); OWNED=obj.owned||{}; WISH=obj.wishlist||{}; QTY=obj.qty||{}; saveAll(); applyFilters(); }; inp.click();};
document.getElementById('btn-cache').onclick=async()=>{try{const reg=await navigator.serviceWorker.ready; const ch=new MessageChannel(); ch.port1.onmessage=(e)=>{if(e.data?.done) alert('Alle kaartafbeeldingen zijn gecachet voor offline gebruik!');}; reg.active.postMessage({type:'PREFETCH_ALL',cards:CARDS},[ch.port2]);}catch(e){alert('Service worker nog niet actief. Herlaad en probeer opnieuw.');}};
if('serviceWorker' in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('./service-worker.js'));}
(function init(){try{const cache=JSON.parse(localStorage.getItem('sv151-cards-cache')||'[]'); if(cache.length){CARDS=cache; populateFilters(); applyFilters(); statusEl.textContent=`Cache: ${CARDS.length} kaarten`;}}catch{} fetchAll(); setTabs();})();